# coding: utf-8

"""
    EHR Explorer Processor API

    API for the EHR Explorer Processor microservice  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: vivod.jernej@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from generated_client.configuration import Configuration


class CompositePropertySpecEntry(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'property_on_this_entity': 'str',
        'property_on_other_entity': 'str',
        'foreign_key_path': 'list[str]',
        'composite_property_name': 'str',
        'combiner': 'str'
    }

    attribute_map = {
        'property_on_this_entity': 'propertyOnThisEntity',
        'property_on_other_entity': 'propertyOnOtherEntity',
        'foreign_key_path': 'foreignKeyPath',
        'composite_property_name': 'compositePropertyName',
        'combiner': 'combiner'
    }

    def __init__(self, property_on_this_entity=None, property_on_other_entity=None, foreign_key_path=None, composite_property_name=None, combiner=None, local_vars_configuration=None):  # noqa: E501
        """CompositePropertySpecEntry - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._property_on_this_entity = None
        self._property_on_other_entity = None
        self._foreign_key_path = None
        self._composite_property_name = None
        self._combiner = None
        self.discriminator = None

        self.property_on_this_entity = property_on_this_entity
        self.property_on_other_entity = property_on_other_entity
        self.foreign_key_path = foreign_key_path
        self.composite_property_name = composite_property_name
        self.combiner = combiner

    @property
    def property_on_this_entity(self):
        """Gets the property_on_this_entity of this CompositePropertySpecEntry.  # noqa: E501


        :return: The property_on_this_entity of this CompositePropertySpecEntry.  # noqa: E501
        :rtype: str
        """
        return self._property_on_this_entity

    @property_on_this_entity.setter
    def property_on_this_entity(self, property_on_this_entity):
        """Sets the property_on_this_entity of this CompositePropertySpecEntry.


        :param property_on_this_entity: The property_on_this_entity of this CompositePropertySpecEntry.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and property_on_this_entity is None:  # noqa: E501
            raise ValueError("Invalid value for `property_on_this_entity`, must not be `None`")  # noqa: E501

        self._property_on_this_entity = property_on_this_entity

    @property
    def property_on_other_entity(self):
        """Gets the property_on_other_entity of this CompositePropertySpecEntry.  # noqa: E501


        :return: The property_on_other_entity of this CompositePropertySpecEntry.  # noqa: E501
        :rtype: str
        """
        return self._property_on_other_entity

    @property_on_other_entity.setter
    def property_on_other_entity(self, property_on_other_entity):
        """Sets the property_on_other_entity of this CompositePropertySpecEntry.


        :param property_on_other_entity: The property_on_other_entity of this CompositePropertySpecEntry.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and property_on_other_entity is None:  # noqa: E501
            raise ValueError("Invalid value for `property_on_other_entity`, must not be `None`")  # noqa: E501

        self._property_on_other_entity = property_on_other_entity

    @property
    def foreign_key_path(self):
        """Gets the foreign_key_path of this CompositePropertySpecEntry.  # noqa: E501


        :return: The foreign_key_path of this CompositePropertySpecEntry.  # noqa: E501
        :rtype: list[str]
        """
        return self._foreign_key_path

    @foreign_key_path.setter
    def foreign_key_path(self, foreign_key_path):
        """Sets the foreign_key_path of this CompositePropertySpecEntry.


        :param foreign_key_path: The foreign_key_path of this CompositePropertySpecEntry.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and foreign_key_path is None:  # noqa: E501
            raise ValueError("Invalid value for `foreign_key_path`, must not be `None`")  # noqa: E501

        self._foreign_key_path = foreign_key_path

    @property
    def composite_property_name(self):
        """Gets the composite_property_name of this CompositePropertySpecEntry.  # noqa: E501


        :return: The composite_property_name of this CompositePropertySpecEntry.  # noqa: E501
        :rtype: str
        """
        return self._composite_property_name

    @composite_property_name.setter
    def composite_property_name(self, composite_property_name):
        """Sets the composite_property_name of this CompositePropertySpecEntry.


        :param composite_property_name: The composite_property_name of this CompositePropertySpecEntry.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and composite_property_name is None:  # noqa: E501
            raise ValueError("Invalid value for `composite_property_name`, must not be `None`")  # noqa: E501

        self._composite_property_name = composite_property_name

    @property
    def combiner(self):
        """Gets the combiner of this CompositePropertySpecEntry.  # noqa: E501


        :return: The combiner of this CompositePropertySpecEntry.  # noqa: E501
        :rtype: str
        """
        return self._combiner

    @combiner.setter
    def combiner(self, combiner):
        """Sets the combiner of this CompositePropertySpecEntry.


        :param combiner: The combiner of this CompositePropertySpecEntry.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and combiner is None:  # noqa: E501
            raise ValueError("Invalid value for `combiner`, must not be `None`")  # noqa: E501
        allowed_values = ["DATE_DIFF"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and combiner not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `combiner` ({0}), must be one of {1}"  # noqa: E501
                .format(combiner, allowed_values)
            )

        self._combiner = combiner

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompositePropertySpecEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CompositePropertySpecEntry):
            return True

        return self.to_dict() != other.to_dict()
