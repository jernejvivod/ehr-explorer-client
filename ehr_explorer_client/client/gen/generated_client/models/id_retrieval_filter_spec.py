# coding: utf-8

"""
    EHR Explorer Processor API

    API for the EHR Explorer Processor microservice  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: vivod.jernej@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from generated_client.configuration import Configuration


class IdRetrievalFilterSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'foreign_key_path': 'list[str]',
        'property_name': 'str',
        'comparator': 'str',
        'property_val': 'object'
    }

    attribute_map = {
        'foreign_key_path': 'foreignKeyPath',
        'property_name': 'propertyName',
        'comparator': 'comparator',
        'property_val': 'propertyVal'
    }

    def __init__(self, foreign_key_path=None, property_name=None, comparator=None, property_val=None, local_vars_configuration=None):  # noqa: E501
        """IdRetrievalFilterSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._foreign_key_path = None
        self._property_name = None
        self._comparator = None
        self._property_val = None
        self.discriminator = None

        self.foreign_key_path = foreign_key_path
        self.property_name = property_name
        self.comparator = comparator
        self.property_val = property_val

    @property
    def foreign_key_path(self):
        """Gets the foreign_key_path of this IdRetrievalFilterSpec.  # noqa: E501


        :return: The foreign_key_path of this IdRetrievalFilterSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._foreign_key_path

    @foreign_key_path.setter
    def foreign_key_path(self, foreign_key_path):
        """Sets the foreign_key_path of this IdRetrievalFilterSpec.


        :param foreign_key_path: The foreign_key_path of this IdRetrievalFilterSpec.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and foreign_key_path is None:  # noqa: E501
            raise ValueError("Invalid value for `foreign_key_path`, must not be `None`")  # noqa: E501

        self._foreign_key_path = foreign_key_path

    @property
    def property_name(self):
        """Gets the property_name of this IdRetrievalFilterSpec.  # noqa: E501


        :return: The property_name of this IdRetrievalFilterSpec.  # noqa: E501
        :rtype: str
        """
        return self._property_name

    @property_name.setter
    def property_name(self, property_name):
        """Sets the property_name of this IdRetrievalFilterSpec.


        :param property_name: The property_name of this IdRetrievalFilterSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and property_name is None:  # noqa: E501
            raise ValueError("Invalid value for `property_name`, must not be `None`")  # noqa: E501

        self._property_name = property_name

    @property
    def comparator(self):
        """Gets the comparator of this IdRetrievalFilterSpec.  # noqa: E501


        :return: The comparator of this IdRetrievalFilterSpec.  # noqa: E501
        :rtype: str
        """
        return self._comparator

    @comparator.setter
    def comparator(self, comparator):
        """Sets the comparator of this IdRetrievalFilterSpec.


        :param comparator: The comparator of this IdRetrievalFilterSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and comparator is None:  # noqa: E501
            raise ValueError("Invalid value for `comparator`, must not be `None`")  # noqa: E501
        allowed_values = ["LESS", "EQUAL", "MORE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and comparator not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `comparator` ({0}), must be one of {1}"  # noqa: E501
                .format(comparator, allowed_values)
            )

        self._comparator = comparator

    @property
    def property_val(self):
        """Gets the property_val of this IdRetrievalFilterSpec.  # noqa: E501


        :return: The property_val of this IdRetrievalFilterSpec.  # noqa: E501
        :rtype: object
        """
        return self._property_val

    @property_val.setter
    def property_val(self, property_val):
        """Sets the property_val of this IdRetrievalFilterSpec.


        :param property_val: The property_val of this IdRetrievalFilterSpec.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and property_val is None:  # noqa: E501
            raise ValueError("Invalid value for `property_val`, must not be `None`")  # noqa: E501

        self._property_val = property_val

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdRetrievalFilterSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IdRetrievalFilterSpec):
            return True

        return self.to_dict() != other.to_dict()
