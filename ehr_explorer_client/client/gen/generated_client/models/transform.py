# coding: utf-8

"""
    EHR Explorer Processor API

    API for the EHR Explorer Processor microservice  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: vivod.jernej@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from generated_client.configuration import Configuration


class Transform(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'kind': 'str',
        'rounding_multiple': 'float',
        'date_diff_round_type': 'str'
    }

    attribute_map = {
        'kind': 'kind',
        'rounding_multiple': 'roundingMultiple',
        'date_diff_round_type': 'dateDiffRoundType'
    }

    def __init__(self, kind=None, rounding_multiple=None, date_diff_round_type=None, local_vars_configuration=None):  # noqa: E501
        """Transform - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._kind = None
        self._rounding_multiple = None
        self._date_diff_round_type = None
        self.discriminator = None

        self.kind = kind
        if rounding_multiple is not None:
            self.rounding_multiple = rounding_multiple
        if date_diff_round_type is not None:
            self.date_diff_round_type = date_diff_round_type

    @property
    def kind(self):
        """Gets the kind of this Transform.  # noqa: E501


        :return: The kind of this Transform.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Transform.


        :param kind: The kind of this Transform.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and kind is None:  # noqa: E501
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501
        allowed_values = ["ROUNDING", "DATE_DIFF_ROUND"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and kind not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"  # noqa: E501
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def rounding_multiple(self):
        """Gets the rounding_multiple of this Transform.  # noqa: E501


        :return: The rounding_multiple of this Transform.  # noqa: E501
        :rtype: float
        """
        return self._rounding_multiple

    @rounding_multiple.setter
    def rounding_multiple(self, rounding_multiple):
        """Sets the rounding_multiple of this Transform.


        :param rounding_multiple: The rounding_multiple of this Transform.  # noqa: E501
        :type: float
        """

        self._rounding_multiple = rounding_multiple

    @property
    def date_diff_round_type(self):
        """Gets the date_diff_round_type of this Transform.  # noqa: E501


        :return: The date_diff_round_type of this Transform.  # noqa: E501
        :rtype: str
        """
        return self._date_diff_round_type

    @date_diff_round_type.setter
    def date_diff_round_type(self, date_diff_round_type):
        """Sets the date_diff_round_type of this Transform.


        :param date_diff_round_type: The date_diff_round_type of this Transform.  # noqa: E501
        :type: str
        """
        allowed_values = ["YEAR", "FIVE_YEARS", "TEN_YEARS", "FIFTEEN_YEARS", "TWENTY_YEARS"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and date_diff_round_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `date_diff_round_type` ({0}), must be one of {1}"  # noqa: E501
                .format(date_diff_round_type, allowed_values)
            )

        self._date_diff_round_type = date_diff_round_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Transform):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Transform):
            return True

        return self.to_dict() != other.to_dict()
