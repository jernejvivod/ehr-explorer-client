# coding: utf-8

"""
    EHR Explorer Processor API

    API for the EHR Explorer Processor microservice  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: vivod.jernej@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from generated_client.configuration import Configuration


class IdRetrievalSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'entity_name': 'str',
        'id_property': 'str',
        'filter_specs': 'list[IdRetrievalFilterSpec]'
    }

    attribute_map = {
        'entity_name': 'entityName',
        'id_property': 'idProperty',
        'filter_specs': 'filterSpecs'
    }

    def __init__(self, entity_name=None, id_property=None, filter_specs=None, local_vars_configuration=None):  # noqa: E501
        """IdRetrievalSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._entity_name = None
        self._id_property = None
        self._filter_specs = None
        self.discriminator = None

        self.entity_name = entity_name
        self.id_property = id_property
        if filter_specs is not None:
            self.filter_specs = filter_specs

    @property
    def entity_name(self):
        """Gets the entity_name of this IdRetrievalSpec.  # noqa: E501


        :return: The entity_name of this IdRetrievalSpec.  # noqa: E501
        :rtype: str
        """
        return self._entity_name

    @entity_name.setter
    def entity_name(self, entity_name):
        """Sets the entity_name of this IdRetrievalSpec.


        :param entity_name: The entity_name of this IdRetrievalSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and entity_name is None:  # noqa: E501
            raise ValueError("Invalid value for `entity_name`, must not be `None`")  # noqa: E501

        self._entity_name = entity_name

    @property
    def id_property(self):
        """Gets the id_property of this IdRetrievalSpec.  # noqa: E501


        :return: The id_property of this IdRetrievalSpec.  # noqa: E501
        :rtype: str
        """
        return self._id_property

    @id_property.setter
    def id_property(self, id_property):
        """Sets the id_property of this IdRetrievalSpec.


        :param id_property: The id_property of this IdRetrievalSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id_property is None:  # noqa: E501
            raise ValueError("Invalid value for `id_property`, must not be `None`")  # noqa: E501

        self._id_property = id_property

    @property
    def filter_specs(self):
        """Gets the filter_specs of this IdRetrievalSpec.  # noqa: E501


        :return: The filter_specs of this IdRetrievalSpec.  # noqa: E501
        :rtype: list[IdRetrievalFilterSpec]
        """
        return self._filter_specs

    @filter_specs.setter
    def filter_specs(self, filter_specs):
        """Sets the filter_specs of this IdRetrievalSpec.


        :param filter_specs: The filter_specs of this IdRetrievalSpec.  # noqa: E501
        :type: list[IdRetrievalFilterSpec]
        """

        self._filter_specs = filter_specs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdRetrievalSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IdRetrievalSpec):
            return True

        return self.to_dict() != other.to_dict()
