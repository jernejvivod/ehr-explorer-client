# coding: utf-8

"""
    EHR Explorer Processor API

    API for the EHR Explorer Processor microservice  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: vivod.jernej@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from generated_client.configuration import Configuration


class EntityStats(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'entity_name': 'str',
        'num_entries': 'int',
        'property_stats': 'list[PropertyStats]'
    }

    attribute_map = {
        'entity_name': 'entityName',
        'num_entries': 'numEntries',
        'property_stats': 'propertyStats'
    }

    def __init__(self, entity_name=None, num_entries=None, property_stats=None, local_vars_configuration=None):  # noqa: E501
        """EntityStats - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._entity_name = None
        self._num_entries = None
        self._property_stats = None
        self.discriminator = None

        if entity_name is not None:
            self.entity_name = entity_name
        if num_entries is not None:
            self.num_entries = num_entries
        if property_stats is not None:
            self.property_stats = property_stats

    @property
    def entity_name(self):
        """Gets the entity_name of this EntityStats.  # noqa: E501


        :return: The entity_name of this EntityStats.  # noqa: E501
        :rtype: str
        """
        return self._entity_name

    @entity_name.setter
    def entity_name(self, entity_name):
        """Sets the entity_name of this EntityStats.


        :param entity_name: The entity_name of this EntityStats.  # noqa: E501
        :type: str
        """

        self._entity_name = entity_name

    @property
    def num_entries(self):
        """Gets the num_entries of this EntityStats.  # noqa: E501


        :return: The num_entries of this EntityStats.  # noqa: E501
        :rtype: int
        """
        return self._num_entries

    @num_entries.setter
    def num_entries(self, num_entries):
        """Sets the num_entries of this EntityStats.


        :param num_entries: The num_entries of this EntityStats.  # noqa: E501
        :type: int
        """

        self._num_entries = num_entries

    @property
    def property_stats(self):
        """Gets the property_stats of this EntityStats.  # noqa: E501


        :return: The property_stats of this EntityStats.  # noqa: E501
        :rtype: list[PropertyStats]
        """
        return self._property_stats

    @property_stats.setter
    def property_stats(self, property_stats):
        """Sets the property_stats of this EntityStats.


        :param property_stats: The property_stats of this EntityStats.  # noqa: E501
        :type: list[PropertyStats]
        """

        self._property_stats = property_stats

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntityStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EntityStats):
            return True

        return self.to_dict() != other.to_dict()
