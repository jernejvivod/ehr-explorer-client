# coding: utf-8

"""
    EHR Explorer Processor API

    API for the EHR Explorer Processor microservice  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: vivod.jernej@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from generated_client.configuration import Configuration


class ForeignKeyPathIdRetrievalSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'foreign_key_path': 'list[str]',
        'root_entity_id_property': 'str',
        'end_entity_id_property': 'str',
        'root_entity_ids': 'list[int]',
        'filter_specs': 'list[IdRetrievalFilterSpec]'
    }

    attribute_map = {
        'foreign_key_path': 'foreignKeyPath',
        'root_entity_id_property': 'rootEntityIdProperty',
        'end_entity_id_property': 'endEntityIdProperty',
        'root_entity_ids': 'rootEntityIds',
        'filter_specs': 'filterSpecs'
    }

    def __init__(self, foreign_key_path=None, root_entity_id_property=None, end_entity_id_property=None, root_entity_ids=None, filter_specs=None, local_vars_configuration=None):  # noqa: E501
        """ForeignKeyPathIdRetrievalSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._foreign_key_path = None
        self._root_entity_id_property = None
        self._end_entity_id_property = None
        self._root_entity_ids = None
        self._filter_specs = None
        self.discriminator = None

        self.foreign_key_path = foreign_key_path
        self.root_entity_id_property = root_entity_id_property
        self.end_entity_id_property = end_entity_id_property
        self.root_entity_ids = root_entity_ids
        if filter_specs is not None:
            self.filter_specs = filter_specs

    @property
    def foreign_key_path(self):
        """Gets the foreign_key_path of this ForeignKeyPathIdRetrievalSpec.  # noqa: E501


        :return: The foreign_key_path of this ForeignKeyPathIdRetrievalSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._foreign_key_path

    @foreign_key_path.setter
    def foreign_key_path(self, foreign_key_path):
        """Sets the foreign_key_path of this ForeignKeyPathIdRetrievalSpec.


        :param foreign_key_path: The foreign_key_path of this ForeignKeyPathIdRetrievalSpec.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and foreign_key_path is None:  # noqa: E501
            raise ValueError("Invalid value for `foreign_key_path`, must not be `None`")  # noqa: E501

        self._foreign_key_path = foreign_key_path

    @property
    def root_entity_id_property(self):
        """Gets the root_entity_id_property of this ForeignKeyPathIdRetrievalSpec.  # noqa: E501


        :return: The root_entity_id_property of this ForeignKeyPathIdRetrievalSpec.  # noqa: E501
        :rtype: str
        """
        return self._root_entity_id_property

    @root_entity_id_property.setter
    def root_entity_id_property(self, root_entity_id_property):
        """Sets the root_entity_id_property of this ForeignKeyPathIdRetrievalSpec.


        :param root_entity_id_property: The root_entity_id_property of this ForeignKeyPathIdRetrievalSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and root_entity_id_property is None:  # noqa: E501
            raise ValueError("Invalid value for `root_entity_id_property`, must not be `None`")  # noqa: E501

        self._root_entity_id_property = root_entity_id_property

    @property
    def end_entity_id_property(self):
        """Gets the end_entity_id_property of this ForeignKeyPathIdRetrievalSpec.  # noqa: E501


        :return: The end_entity_id_property of this ForeignKeyPathIdRetrievalSpec.  # noqa: E501
        :rtype: str
        """
        return self._end_entity_id_property

    @end_entity_id_property.setter
    def end_entity_id_property(self, end_entity_id_property):
        """Sets the end_entity_id_property of this ForeignKeyPathIdRetrievalSpec.


        :param end_entity_id_property: The end_entity_id_property of this ForeignKeyPathIdRetrievalSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and end_entity_id_property is None:  # noqa: E501
            raise ValueError("Invalid value for `end_entity_id_property`, must not be `None`")  # noqa: E501

        self._end_entity_id_property = end_entity_id_property

    @property
    def root_entity_ids(self):
        """Gets the root_entity_ids of this ForeignKeyPathIdRetrievalSpec.  # noqa: E501


        :return: The root_entity_ids of this ForeignKeyPathIdRetrievalSpec.  # noqa: E501
        :rtype: list[int]
        """
        return self._root_entity_ids

    @root_entity_ids.setter
    def root_entity_ids(self, root_entity_ids):
        """Sets the root_entity_ids of this ForeignKeyPathIdRetrievalSpec.


        :param root_entity_ids: The root_entity_ids of this ForeignKeyPathIdRetrievalSpec.  # noqa: E501
        :type: list[int]
        """
        if self.local_vars_configuration.client_side_validation and root_entity_ids is None:  # noqa: E501
            raise ValueError("Invalid value for `root_entity_ids`, must not be `None`")  # noqa: E501

        self._root_entity_ids = root_entity_ids

    @property
    def filter_specs(self):
        """Gets the filter_specs of this ForeignKeyPathIdRetrievalSpec.  # noqa: E501


        :return: The filter_specs of this ForeignKeyPathIdRetrievalSpec.  # noqa: E501
        :rtype: list[IdRetrievalFilterSpec]
        """
        return self._filter_specs

    @filter_specs.setter
    def filter_specs(self, filter_specs):
        """Sets the filter_specs of this ForeignKeyPathIdRetrievalSpec.


        :param filter_specs: The filter_specs of this ForeignKeyPathIdRetrievalSpec.  # noqa: E501
        :type: list[IdRetrievalFilterSpec]
        """

        self._filter_specs = filter_specs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ForeignKeyPathIdRetrievalSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ForeignKeyPathIdRetrievalSpec):
            return True

        return self.to_dict() != other.to_dict()
