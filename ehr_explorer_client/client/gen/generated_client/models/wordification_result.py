# coding: utf-8

"""
    EHR Explorer Processor API

    API for the EHR Explorer Processor microservice  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: vivod.jernej@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from generated_client.configuration import Configuration


class WordificationResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'root_entity_id': 'int',
        'time_lim': 'datetime',
        'words': 'list[str]'
    }

    attribute_map = {
        'root_entity_id': 'rootEntityId',
        'time_lim': 'timeLim',
        'words': 'words'
    }

    def __init__(self, root_entity_id=None, time_lim=None, words=None, local_vars_configuration=None):  # noqa: E501
        """WordificationResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._root_entity_id = None
        self._time_lim = None
        self._words = None
        self.discriminator = None

        if root_entity_id is not None:
            self.root_entity_id = root_entity_id
        if time_lim is not None:
            self.time_lim = time_lim
        if words is not None:
            self.words = words

    @property
    def root_entity_id(self):
        """Gets the root_entity_id of this WordificationResult.  # noqa: E501


        :return: The root_entity_id of this WordificationResult.  # noqa: E501
        :rtype: int
        """
        return self._root_entity_id

    @root_entity_id.setter
    def root_entity_id(self, root_entity_id):
        """Sets the root_entity_id of this WordificationResult.


        :param root_entity_id: The root_entity_id of this WordificationResult.  # noqa: E501
        :type: int
        """

        self._root_entity_id = root_entity_id

    @property
    def time_lim(self):
        """Gets the time_lim of this WordificationResult.  # noqa: E501


        :return: The time_lim of this WordificationResult.  # noqa: E501
        :rtype: datetime
        """
        return self._time_lim

    @time_lim.setter
    def time_lim(self, time_lim):
        """Sets the time_lim of this WordificationResult.


        :param time_lim: The time_lim of this WordificationResult.  # noqa: E501
        :type: datetime
        """

        self._time_lim = time_lim

    @property
    def words(self):
        """Gets the words of this WordificationResult.  # noqa: E501


        :return: The words of this WordificationResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._words

    @words.setter
    def words(self, words):
        """Sets the words of this WordificationResult.


        :param words: The words of this WordificationResult.  # noqa: E501
        :type: list[str]
        """

        self._words = words

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WordificationResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WordificationResult):
            return True

        return self.to_dict() != other.to_dict()
