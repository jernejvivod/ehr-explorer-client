# coding: utf-8

"""
    EHR Explorer Processor API

    API for the EHR Explorer Processor microservice  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: vivod.jernej@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from generated_client.configuration import Configuration


class ExtractedTarget(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'root_entity_id': 'int',
        'target_entity_id': 'int',
        'target_value': 'int',
        'date_time_limit': 'datetime'
    }

    attribute_map = {
        'root_entity_id': 'rootEntityId',
        'target_entity_id': 'targetEntityId',
        'target_value': 'targetValue',
        'date_time_limit': 'dateTimeLimit'
    }

    def __init__(self, root_entity_id=None, target_entity_id=None, target_value=None, date_time_limit=None, local_vars_configuration=None):  # noqa: E501
        """ExtractedTarget - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._root_entity_id = None
        self._target_entity_id = None
        self._target_value = None
        self._date_time_limit = None
        self.discriminator = None

        if root_entity_id is not None:
            self.root_entity_id = root_entity_id
        if target_entity_id is not None:
            self.target_entity_id = target_entity_id
        if target_value is not None:
            self.target_value = target_value
        if date_time_limit is not None:
            self.date_time_limit = date_time_limit

    @property
    def root_entity_id(self):
        """Gets the root_entity_id of this ExtractedTarget.  # noqa: E501


        :return: The root_entity_id of this ExtractedTarget.  # noqa: E501
        :rtype: int
        """
        return self._root_entity_id

    @root_entity_id.setter
    def root_entity_id(self, root_entity_id):
        """Sets the root_entity_id of this ExtractedTarget.


        :param root_entity_id: The root_entity_id of this ExtractedTarget.  # noqa: E501
        :type: int
        """

        self._root_entity_id = root_entity_id

    @property
    def target_entity_id(self):
        """Gets the target_entity_id of this ExtractedTarget.  # noqa: E501


        :return: The target_entity_id of this ExtractedTarget.  # noqa: E501
        :rtype: int
        """
        return self._target_entity_id

    @target_entity_id.setter
    def target_entity_id(self, target_entity_id):
        """Sets the target_entity_id of this ExtractedTarget.


        :param target_entity_id: The target_entity_id of this ExtractedTarget.  # noqa: E501
        :type: int
        """

        self._target_entity_id = target_entity_id

    @property
    def target_value(self):
        """Gets the target_value of this ExtractedTarget.  # noqa: E501


        :return: The target_value of this ExtractedTarget.  # noqa: E501
        :rtype: int
        """
        return self._target_value

    @target_value.setter
    def target_value(self, target_value):
        """Sets the target_value of this ExtractedTarget.


        :param target_value: The target_value of this ExtractedTarget.  # noqa: E501
        :type: int
        """

        self._target_value = target_value

    @property
    def date_time_limit(self):
        """Gets the date_time_limit of this ExtractedTarget.  # noqa: E501


        :return: The date_time_limit of this ExtractedTarget.  # noqa: E501
        :rtype: datetime
        """
        return self._date_time_limit

    @date_time_limit.setter
    def date_time_limit(self, date_time_limit):
        """Sets the date_time_limit of this ExtractedTarget.


        :param date_time_limit: The date_time_limit of this ExtractedTarget.  # noqa: E501
        :type: datetime
        """

        self._date_time_limit = date_time_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExtractedTarget):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExtractedTarget):
            return True

        return self.to_dict() != other.to_dict()
