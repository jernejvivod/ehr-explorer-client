# coding: utf-8

"""
    EHR Explorer Processor API

    API for the EHR Explorer Processor microservice  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: vivod.jernej@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from generated_client.configuration import Configuration


class WordificationConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'root_entities_spec': 'RootEntitiesSpec',
        'property_spec': 'PropertySpec',
        'composite_columns_spec': 'CompositeColumnsSpec',
        'value_transformation_spec': 'ValueTransformationSpec',
        'concatenation_spec': 'ConcatenationSpec'
    }

    attribute_map = {
        'root_entities_spec': 'rootEntitiesSpec',
        'property_spec': 'propertySpec',
        'composite_columns_spec': 'compositeColumnsSpec',
        'value_transformation_spec': 'valueTransformationSpec',
        'concatenation_spec': 'concatenationSpec'
    }

    def __init__(self, root_entities_spec=None, property_spec=None, composite_columns_spec=None, value_transformation_spec=None, concatenation_spec=None, local_vars_configuration=None):  # noqa: E501
        """WordificationConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._root_entities_spec = None
        self._property_spec = None
        self._composite_columns_spec = None
        self._value_transformation_spec = None
        self._concatenation_spec = None
        self.discriminator = None

        self.root_entities_spec = root_entities_spec
        self.property_spec = property_spec
        if composite_columns_spec is not None:
            self.composite_columns_spec = composite_columns_spec
        if value_transformation_spec is not None:
            self.value_transformation_spec = value_transformation_spec
        self.concatenation_spec = concatenation_spec

    @property
    def root_entities_spec(self):
        """Gets the root_entities_spec of this WordificationConfig.  # noqa: E501


        :return: The root_entities_spec of this WordificationConfig.  # noqa: E501
        :rtype: RootEntitiesSpec
        """
        return self._root_entities_spec

    @root_entities_spec.setter
    def root_entities_spec(self, root_entities_spec):
        """Sets the root_entities_spec of this WordificationConfig.


        :param root_entities_spec: The root_entities_spec of this WordificationConfig.  # noqa: E501
        :type: RootEntitiesSpec
        """
        if self.local_vars_configuration.client_side_validation and root_entities_spec is None:  # noqa: E501
            raise ValueError("Invalid value for `root_entities_spec`, must not be `None`")  # noqa: E501

        self._root_entities_spec = root_entities_spec

    @property
    def property_spec(self):
        """Gets the property_spec of this WordificationConfig.  # noqa: E501


        :return: The property_spec of this WordificationConfig.  # noqa: E501
        :rtype: PropertySpec
        """
        return self._property_spec

    @property_spec.setter
    def property_spec(self, property_spec):
        """Sets the property_spec of this WordificationConfig.


        :param property_spec: The property_spec of this WordificationConfig.  # noqa: E501
        :type: PropertySpec
        """
        if self.local_vars_configuration.client_side_validation and property_spec is None:  # noqa: E501
            raise ValueError("Invalid value for `property_spec`, must not be `None`")  # noqa: E501

        self._property_spec = property_spec

    @property
    def composite_columns_spec(self):
        """Gets the composite_columns_spec of this WordificationConfig.  # noqa: E501


        :return: The composite_columns_spec of this WordificationConfig.  # noqa: E501
        :rtype: CompositeColumnsSpec
        """
        return self._composite_columns_spec

    @composite_columns_spec.setter
    def composite_columns_spec(self, composite_columns_spec):
        """Sets the composite_columns_spec of this WordificationConfig.


        :param composite_columns_spec: The composite_columns_spec of this WordificationConfig.  # noqa: E501
        :type: CompositeColumnsSpec
        """

        self._composite_columns_spec = composite_columns_spec

    @property
    def value_transformation_spec(self):
        """Gets the value_transformation_spec of this WordificationConfig.  # noqa: E501


        :return: The value_transformation_spec of this WordificationConfig.  # noqa: E501
        :rtype: ValueTransformationSpec
        """
        return self._value_transformation_spec

    @value_transformation_spec.setter
    def value_transformation_spec(self, value_transformation_spec):
        """Sets the value_transformation_spec of this WordificationConfig.


        :param value_transformation_spec: The value_transformation_spec of this WordificationConfig.  # noqa: E501
        :type: ValueTransformationSpec
        """

        self._value_transformation_spec = value_transformation_spec

    @property
    def concatenation_spec(self):
        """Gets the concatenation_spec of this WordificationConfig.  # noqa: E501


        :return: The concatenation_spec of this WordificationConfig.  # noqa: E501
        :rtype: ConcatenationSpec
        """
        return self._concatenation_spec

    @concatenation_spec.setter
    def concatenation_spec(self, concatenation_spec):
        """Sets the concatenation_spec of this WordificationConfig.


        :param concatenation_spec: The concatenation_spec of this WordificationConfig.  # noqa: E501
        :type: ConcatenationSpec
        """
        if self.local_vars_configuration.client_side_validation and concatenation_spec is None:  # noqa: E501
            raise ValueError("Invalid value for `concatenation_spec`, must not be `None`")  # noqa: E501

        self._concatenation_spec = concatenation_spec

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WordificationConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WordificationConfig):
            return True

        return self.to_dict() != other.to_dict()
