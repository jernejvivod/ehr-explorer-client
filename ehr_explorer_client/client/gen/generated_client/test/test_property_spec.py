# coding: utf-8

"""
    EHR Explorer Processor API

    API for the EHR Explorer Processor microservice  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: vivod.jernej@gmail.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import generated_client
from generated_client.models.property_spec import PropertySpec  # noqa: E501
from generated_client.rest import ApiException

class TestPropertySpec(unittest.TestCase):
    """PropertySpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test PropertySpec
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = generated_client.models.property_spec.PropertySpec()  # noqa: E501
        if include_optional :
            return PropertySpec(
                entries = [
                    generated_client.models.property_spec_entry.PropertySpecEntry(
                        entity = 'AdmissionsEntity', 
                        properties = [
                            'insurance'
                            ], 
                        property_for_limit = 'admitTime', 
                        composite_property_spec_entries = [
                            generated_client.models.composite_property_spec_entry.CompositePropertySpecEntry(
                                property_on_this_entity = 'inTime', 
                                property_on_other_entity = 'dob', 
                                foreign_key_path = [
                                    '["IcuStaysEntity","PatientsEntity"]'
                                    ], 
                                composite_property_name = 'ageAtAdmission', 
                                combiner = 'DATE_DIFF', )
                            ], )
                    ], 
                root_entity_and_lime_limit = [
                    generated_client.models.root_entity_and_time_limit.RootEntityAndTimeLimit(
                        root_entity_id = 56, 
                        time_lim = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ]
            )
        else :
            return PropertySpec(
                entries = [
                    generated_client.models.property_spec_entry.PropertySpecEntry(
                        entity = 'AdmissionsEntity', 
                        properties = [
                            'insurance'
                            ], 
                        property_for_limit = 'admitTime', 
                        composite_property_spec_entries = [
                            generated_client.models.composite_property_spec_entry.CompositePropertySpecEntry(
                                property_on_this_entity = 'inTime', 
                                property_on_other_entity = 'dob', 
                                foreign_key_path = [
                                    '["IcuStaysEntity","PatientsEntity"]'
                                    ], 
                                composite_property_name = 'ageAtAdmission', 
                                combiner = 'DATE_DIFF', )
                            ], )
                    ],
        )

    def testPropertySpec(self):
        """Test PropertySpec"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
