# coding: utf-8

"""
    EHR Explorer Processor API

    API for the EHR Explorer Processor microservice  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: vivod.jernej@gmail.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import generated_client
from generated_client.models.wordification_config import WordificationConfig  # noqa: E501
from generated_client.rest import ApiException

class TestWordificationConfig(unittest.TestCase):
    """WordificationConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test WordificationConfig
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = generated_client.models.wordification_config.WordificationConfig()  # noqa: E501
        if include_optional :
            return WordificationConfig(
                root_entities_spec = generated_client.models.root_entities_spec.RootEntitiesSpec(
                    root_entity = 'AdmissionsEntity', 
                    id_property = 'hadmId', 
                    ids = [
                        56
                        ], ), 
                property_spec = generated_client.models.property_spec.PropertySpec(
                    entries = [
                        generated_client.models.property_spec_entry.PropertySpecEntry(
                            entity = 'AdmissionsEntity', 
                            properties = [
                                'insurance'
                                ], 
                            property_for_limit = 'admitTime', 
                            composite_property_spec_entries = [
                                generated_client.models.composite_property_spec_entry.CompositePropertySpecEntry(
                                    property_on_this_entity = 'inTime', 
                                    property_on_other_entity = 'dob', 
                                    foreign_key_path = [
                                        '["IcuStaysEntity","PatientsEntity"]'
                                        ], 
                                    composite_property_name = 'ageAtAdmission', 
                                    combiner = 'DATE_DIFF', )
                                ], )
                        ], 
                    root_entity_and_lime_limit = [
                        generated_client.models.root_entity_and_time_limit.RootEntityAndTimeLimit(
                            root_entity_id = 56, 
                            time_lim = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], ), 
                composite_columns_spec = generated_client.models.composite_columns_spec.CompositeColumnsSpec(
                    entries = [
                        generated_client.models.composite_columns_spec_entry.CompositeColumnsSpecEntry(
                            foreign_key_path1 = [
                                '0'
                                ], 
                            property1 = 'admitTime', 
                            foreign_key_path2 = [
                                '0'
                                ], 
                            property2 = 'dob', 
                            composite_name = 'ageDecades', 
                            combiner = 'DATE_DIFF', )
                        ], ), 
                value_transformation_spec = generated_client.models.value_transformation_spec.ValueTransformationSpec(
                    entries = [
                        generated_client.models.value_transformation_spec_entry.ValueTransformationSpecEntry(
                            entity = 'AdmissionsEntity', 
                            property = '0', 
                            transform = generated_client.models.transform.Transform(
                                kind = 'ROUNDING', 
                                rounding_multiple = 20.0, 
                                date_diff_round_type = 'YEAR', ), )
                        ], ), 
                concatenation_spec = generated_client.models.concatenation_spec.ConcatenationSpec(
                    concatenation_scheme = 'ZERO', )
            )
        else :
            return WordificationConfig(
                root_entities_spec = generated_client.models.root_entities_spec.RootEntitiesSpec(
                    root_entity = 'AdmissionsEntity', 
                    id_property = 'hadmId', 
                    ids = [
                        56
                        ], ),
                property_spec = generated_client.models.property_spec.PropertySpec(
                    entries = [
                        generated_client.models.property_spec_entry.PropertySpecEntry(
                            entity = 'AdmissionsEntity', 
                            properties = [
                                'insurance'
                                ], 
                            property_for_limit = 'admitTime', 
                            composite_property_spec_entries = [
                                generated_client.models.composite_property_spec_entry.CompositePropertySpecEntry(
                                    property_on_this_entity = 'inTime', 
                                    property_on_other_entity = 'dob', 
                                    foreign_key_path = [
                                        '["IcuStaysEntity","PatientsEntity"]'
                                        ], 
                                    composite_property_name = 'ageAtAdmission', 
                                    combiner = 'DATE_DIFF', )
                                ], )
                        ], 
                    root_entity_and_lime_limit = [
                        generated_client.models.root_entity_and_time_limit.RootEntityAndTimeLimit(
                            root_entity_id = 56, 
                            time_lim = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], ),
                concatenation_spec = generated_client.models.concatenation_spec.ConcatenationSpec(
                    concatenation_scheme = 'ZERO', ),
        )

    def testWordificationConfig(self):
        """Test WordificationConfig"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
